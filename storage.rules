rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function hasValidContentType() {
      return request.resource.contentType.matches('image/.*') ||
             request.resource.contentType.matches('video/.*') ||
             request.resource.contentType.matches('audio/.*') ||
             request.resource.contentType.matches('application/json');
    }
    
    function isValidFileSize() {
      return request.resource.size < 100 * 1024 * 1024; // 100MB limit
    }
    
    function isPublicFile(filePath) {
      return exists(/databases/(default)/documents/social_feed/$(filePath)) &&
             get(/databases/(default)/documents/social_feed/$(filePath)).data.isPublic == true;
    }

    // Generated content
    match /generated/{userId}/{type}/{fileName} {
      allow read: if isAuthenticated() && (
        isOwner(userId) || 
        isPublicFile(fileName)
      );
      allow write: if isAuthenticated() && 
                  isOwner(userId) && 
                  hasValidContentType() && 
                  isValidFileSize();
      allow delete: if isAuthenticated() && isOwner(userId);
    }

    // User uploads (for processing)
    match /uploads/{userId}/{fileName} {
      allow read: if isAuthenticated() && isOwner(userId);
      allow write: if isAuthenticated() && 
                  isOwner(userId) && 
                  hasValidContentType() && 
                  request.resource.size < 50 * 1024 * 1024; // 50MB limit for uploads
      allow delete: if isAuthenticated() && isOwner(userId);
    }

    // Public assets
    match /public/{fileName} {
      allow read: if true;
      allow write: if false; // Only writable by server
    }

    // Catch-all rule
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
} 