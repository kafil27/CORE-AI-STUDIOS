rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isAdmin() {
      return request.auth.token.admin == true;
    }

    function hasSubscription() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.subscriptionLevel != null;
    }
    
    function hasEnoughTokens(tokenCost) {
      let userData = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      return userData.tokens >= tokenCost;
    }

    // Users collection
    match /users/{userId} {
      allow read: if isOwner(userId);
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isOwner(userId) && 
        (!request.resource.data.diff(resource.data).affectedKeys()
          .hasAny(['tokens', 'subscriptionLevel']));
      
      // Token history subcollection
      match /token_history/{historyId} {
        allow read: if isOwner(userId);
        allow write: if false; // Only writable by server
      }
      
      // Token reservations subcollection
      match /token_reservations/{reservationId} {
        allow read: if isOwner(userId);
        allow write: if false; // Only writable by server
      }
    }

    // Chats collection
    match /chats/{userId}/{document=**} {
      allow read, write: if isOwner(userId);
    }

    // Usage history
    match /usage_history/{document} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if false;
    }

    // Generation queue collection
    match /generation_queue/{requestId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        resource.data.metadata.isPublic == true
      );
      
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.status == 'pending' &&
        hasEnoughTokens(request.resource.data.tokenCost);
      
      allow update: if isAuthenticated() &&
        resource.data.userId == request.auth.uid &&
        request.resource.data.userId == request.auth.uid &&
        (
          // Allow status updates for cancellation
          (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status']) &&
           request.resource.data.status == 'cancelled') ||
          // Allow progress updates
          (request.resource.data.diff(resource.data).affectedKeys().hasAny(['progress', 'queuePosition', 'estimatedTimeRemaining']))
        );
      
      allow delete: if isAuthenticated() &&
        resource.data.userId == request.auth.uid &&
        (resource.data.status == 'completed' || resource.data.status == 'failed' || resource.data.status == 'cancelled');
    }

    // Generation history
    match /generation_history/{requestId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow write: if false; // Only writable by server
    }

    // API requests tracking
    match /api_requests/{requestId} {
      allow read, write: if isAuthenticated();
    }

    // Social feed collection
    match /social_feed/{postId} {
      allow read: if true;
      allow create: if false; // Only writable by server
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid &&
        !request.resource.data.diff(resource.data).affectedKeys()
          .hasAny(['type', 'prompt', 'result', 'createdAt']);
      allow delete: if false;
      
      match /likes/{userId} {
        allow read: if true;
        allow write: if isAuthenticated() && userId == request.auth.uid;
      }
      
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isAuthenticated();
        allow update, delete: if isAuthenticated() && 
          resource.data.userId == request.auth.uid;
      }
    }
  }
} 